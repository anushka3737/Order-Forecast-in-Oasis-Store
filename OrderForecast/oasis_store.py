# -*- coding: utf-8 -*-
"""Oasis_Store.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rDioJPghmOjNkjS0YneM3NgQS3TOHghe
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

plt.style.use('seaborn')

pd.set_option('display.max_rows', 250)
# %matplotlib inline

df = pd.read_csv(r'C:\Users\HP\Desktop\oasis_data.csv')

df

#number of features & data points
df.shape

#getting some info about dataset
df.info()

#categorical features
 # Region
 # Shipping Country
 # OEM
 # Product Name

#check for missing values
df.isnull().sum()

#handling missing values
  # mode -> most repeated value

#replacing missing values in "Region" with mode 

mode_of_Region = df.pivot_table(values = 'Region', columns = 'Shipping Country', aggfunc=(lambda x: x.mode()[0]))
print(mode_of_Region)

missing_values = df['Region'].isnull()

print(missing_values)

df.loc[missing_values, 'Region'] = df.loc[missing_values , 'Shipping Country'].apply(lambda x: mode_of_Region)

#check again for missing values
df.isnull().sum()

#data analysis
df.describe()

#numerical features plot
sns.set()

plt.figure(figsize=(10,10))
sns.distplot(df['Item Price USD'])
plt.show()

plt.figure(figsize=(10,10))
sns.distplot(df['Ordered Qty'])
plt.show()

plt.figure(figsize=(10,10))
sns.distplot(df['Row Total'])
plt.show()

#categorical feature plot
plt.figure(figsize=(10,10))
sns.countplot(x ='Product Name', data = df)
plt.show()

plt.figure(figsize=(10,10))
sns.countplot(x ='OEM', data = df)
plt.show()

plt.figure(figsize=(10,10))
sns.countplot(x ='Shipping Country', data = df)
plt.show()

plt.figure(figsize=(10,10))
sns.countplot(x ='Purchase Date', data = df)
plt.show()

#data pre-processing
df.head()

#Label Encoding
encoder = LabelEncoder()

df['Product Name'] = encoder.fit_transform(df['Product Name'])
df['OEM'] = encoder.fit_transform(df['OEM'])
df['Shipping Country'] = encoder.fit_transform(df['Shipping Country'])
#df['Region'] = encoder.fit_transform(df['Region'])

df.head()

df= df.drop(['Region'], axis =1 )

df.head()

x = df.drop(columns = ['Row Total','Purchase Date'], axis =1)
y = df['Row Total']

print(x)

print(y)

#splitting data into training and testing data
x_train, x_test , y_train , y_test = train_test_split(x, y, test_size = 0.2 , random_state = 2 )

print(x.shape, x_train.shape, x_test.shape)

print(y.shape, y_train.shape, y_test.shape)

#Machine Learning model training
# XGBoost Regressor
regressor = XGBRegressor()

regressor.fit(x_train, y_train)

#evaluation of the model
training_prediction = regressor.predict(x_train)

print(training_prediction)

r2_score_train = metrics.r2_score(y_train, training_prediction)

print('R Squared value train :', r2_score_train)

#predict for test data
test_prediction = regressor.predict(x_test)

print(test_prediction)

r2_score_test = metrics.r2_score(y_test, test_prediction)

print('R Squared value test:', r2_score_test)

plt.plot(y_test, test_prediction, color = 'red')
plt.title('Actaul sales vs Forecasted sales')
plt.show()

from sklearn.linear_model import LinearRegression

LRClassifier = LinearRegression ()# object  of algorithm
LRClassifier.fit (x_train, y_train)

m=LRClassifier.coef_  # slope
c=LRClassifier.intercept_   #intersecpt
print("slope",m)
print("intercept",c)

prediction = LRClassifier.predict (x_train)
print(prediction)

r1_score_train = metrics.r2_score(y_train, prediction)

print('R Squared value train :', r1_score_train)

#predict for test data
LR_test_prediction = LRClassifier.predict(x_test)

print(LR_test_prediction)

r1_score_test = metrics.r2_score(y_test, LR_test_prediction)

print('R Squared value test:', r1_score_test)

plt.plot(y_test, LR_test_prediction, color = 'red')
plt.title('Actaul sales vs Forecasted sales')
plt.show()

import os
import sys
import pickle

projectabspathname = os.path.abspath('Oasis_Store.pickle')
print(projectabspathname)
projectname = 'Oasis_Store.ipynb'
projectpickle = open(str(projectabspathname),'wb')
pickle.dump(projectname, projectpickle)
projectpickle.close()

